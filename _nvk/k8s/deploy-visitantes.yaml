apiVersion: v1
kind: Namespace
metadata:
  name: portaria
  labels:
    pod-security.kubernetes.io/enforce: baseline
    pod-security.kubernetes.io/warn: restricted

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-backend-prod
  namespace: 	portaria   ### where prod is the name of the namespace #
  labels:
    app: api-backend-prod
spec:
  securityContext:
    fsGroup: 2000
  replicas: 1
  selector:
    matchLabels:
      app: api-backend-prod
  template:
    metadata:
      labels:
        app: api-backend-prod
    spec:
      containers:
      - name: api-backend-prod
        image: novakio/cdcportaria:backendprod1
#        command:
#          - /bin/sh
#          - -c
#          - "chown -R root:root /app/src/storage"
        imagePullPolicy: Always
#        livenessProbe:      ## nova implementação, recurso que faz o check da api no api/teams e se der 404 vai recriar o container
#          httpGet:
#            path: /
#            port: 3333
#            httpHeaders:
#            - name: X-Custom-Header
#              value: Awesome
#          initialDelaySeconds: 3     ## quanto tempo vai durar a checagem
#          periodSeconds: 30     ## qual o intervalo que vai fazer a checagem
#          successThreshold: 1
#          failureThreshold: 2
#          timeoutSeconds: 5
        ports:
        - containerPort: 3333
        resources:
#          limits:
#            memory: "1Gi"
#            cpu: "1"
          requests:
            cpu: "0.3"
            memory: "1Gi"
#        volumeMounts:
#        - name: vol-miv-new
#          mountPath: /app/src/storage
#      volumes:
#      - name: vol-miv-new
#        persistentVolumeClaim:
#          claimName: vol-miv-new
      imagePullSecrets:
      - name: docker-hub-novakio

---

apiVersion: v1
kind: Service
metadata:
  name: api-backend-prod
  namespace: 	portaria  ## where prod is the name of the namespace
  labels:
    app: api-backend-prod
spec:
  type: NodePort
  selector:
    app: api-backend-prod
  ports:
    - port: 8624
      protocol: TCP
      targetPort: 3333  ### porta do container / aplicação
      nodePort: 30776

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: api-backend-prod
  namespace: 	portaria   ### where prod is the name of the namespace
  annotations:
#    ingress.kubernetes.io/rewrite-target: /
    nginx.org/proxy-connect-timeout: "3000s"
    nginx.org/proxy-read-timeout: "2000s"
    nginx.org/client-max-body-size: "200m"
    nginx.ingress.kubernetes.io/proxy-body-size: 200m
#    nginx.ingress.kubernetes.io/enable-cors: "true"
#    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "PUT, PATCH, GET, POST, OPTIONS, DELETE"
#    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,X-LANG,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,X-Api-Key,X-Device-Id,Access-Control-Allow-Origin"
#    kubernetes.io/ingress.class: nginx
#    cert-manager.io/cluster-issuer: letsencrypt-prod
  labels:
    app: api-backend-prod
spec:
  ingressClassName: nginx
  rules:
  - host: api-portaria.casadiconti.com.br
    http:
      paths:
      - backend:
          service:
            name: api-backend-prod
            port:
              number: 8624
        path: /
        pathType: Prefix
#  tls:
#    - hosts:
#      - miv-beta.casadiconti.com
#      secretName: beta-eks-front
